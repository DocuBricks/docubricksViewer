"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const zlib = require("zlib");
const crypto_1 = require("crypto");
function findCompiledModule(fileName) {
    let baseFileName = fileName.replace(/(\.ts|\.tsx)$/, '');
    let compiledFileName = `${baseFileName}.js`;
    if (fs.existsSync(compiledFileName)) {
        let mapFileName = `${baseFileName}.js.map`;
        let isMapExists = fs.existsSync(mapFileName);
        let result = {
            fileName: compiledFileName,
            text: fs.readFileSync(compiledFileName).toString(),
            mapName: isMapExists
                ? mapFileName
                : null,
            map: isMapExists
                ? fs.readFileSync(mapFileName).toString()
                : null
        };
        return result;
    }
    else {
        return null;
    }
}
exports.findCompiledModule = findCompiledModule;
function read(filename) {
    let content = fs.readFileSync(filename);
    let jsonString = zlib.gunzipSync(content);
    return JSON.parse(jsonString.toString());
}
function write(filename, result) {
    let jsonString = JSON.stringify(result);
    let content = zlib.gzipSync(jsonString);
    return fs.writeFileSync(filename, content);
}
function filename(source, identifier, options) {
    let hash = crypto_1.createHash('sha512');
    let contents = JSON.stringify({
        identifier: identifier,
        options: options,
        source: source,
    });
    hash.end(contents);
    return hash.read().toString('hex') + '.json.gzip';
}
;
function cache(params) {
    let source = params.source;
    let options = params.options || {};
    let transform = params.transform;
    let identifier = params.identifier;
    let directory = (typeof params.directory === 'string') ?
        params.directory :
        os.tmpdir();
    let file = path.join(directory, filename(source, identifier, options));
    try {
        return Promise.resolve({ cached: true, result: read(file) });
    }
    catch (e) {
        return transform().then(result => {
            write(file, result);
            return { cached: false, result };
        });
    }
}
exports.cache = cache;
//# sourceMappingURL=cache.js.map