"use strict";
var isWindows = /^win/.test(process.platform);
var logOnError = function (error) { if (error) {
    console.error(error);
} };
// Wrapper around process.send() that will queue any messages if the internal node.js
// queue is filled with messages and only continue sending messages when the internal
// queue is free again to consume messages.
// On Windows we always wait for the send() method to return before sending the next message
// to workaround https://github.com/nodejs/node/issues/7657 (IPC can freeze process)
function createQueuedSender(childProcess) {
    if (isWindows) {
        var msgQueue_1 = [];
        var isSending_1 = false;
        var cb_1 = function (error) {
            logOnError(error);
            if (msgQueue_1.length > 0) {
                setImmediate(doSendLoop_1);
            }
            else {
                isSending_1 = false;
            }
        };
        var doSendLoop_1 = function () {
            childProcess.send(msgQueue_1.shift(), cb_1);
        };
        var send = function (msg) {
            msgQueue_1.push(msg); // add to the queue if the process cannot handle more messages
            if (isSending_1) {
                return;
            }
            isSending_1 = true;
            doSendLoop_1();
        };
        return { send: send };
    }
    else {
        var send = function (msg) {
            childProcess.send(msg, logOnError);
        };
        return { send: send };
    }
}
exports.createQueuedSender = createQueuedSender;
