"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const compile_output_1 = require("./compile-output");
utils_1.spec(__filename, function (env, done) {
    return __awaiter(this, void 0, void 0, function* () {
        const index = utils_1.src('index.ts', `
        export default function sum(a: number, b: number) {
            return a + b;
        }

        sum(1, '1');
    `);
        utils_1.tsconfig();
        compile_output_1.config(env);
        const webpack = utils_1.execWebpack(['--watch']);
        webpack.strictOutput();
        yield webpack.wait(utils_1.stdout('Webpack is watching the filesâ€¦'), utils_1.stderr('Checking finished with 1 errors'), utils_1.stdout([
            'ERROR in [at-loader] ./src/index.ts',
            `TS2345: Argument of type '"1"' is not assignable to parameter of type 'number'`
        ]));
        index.update(() => `
        export default function sum(a: number, b: number) {
            return a + b;
        }

        sum(1, 1);
    `);
        yield webpack.wait(utils_1.stdout([
            [true, '[emitted]'], [false, 'ERROR']
        ]));
        webpack.close();
        done();
    });
});
//# sourceMappingURL=watch-output.js.map