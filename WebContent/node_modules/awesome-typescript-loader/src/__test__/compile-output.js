"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
function config(env) {
    utils_1.file(`webpack.config.js`, `
        const path = require('path')
        module.exports = {
            entry: { index: path.join(process.cwd(), '${env.SRC_DIR}', 'index.ts') },
            output: {
                path: path.join(process.cwd(), '${env.OUT_DIR}'),
                filename: '[name].js'
            },
            resolve: {
                extensions: ['.ts', '.tsx', '.js', '.jsx'],
            },
            module: {
                loaders: [
                    {
                        test: /\.(tsx?|jsx?)/,
                        loader: path.resolve(process.cwd(), '..', '..', 'index.js'),
                        include: [ path.join(process.cwd(), '${env.SRC_DIR}') ],
                        query: {
                            silent: true
                        }
                    }
                ]
            }
        }
    `);
}
exports.config = config;
utils_1.spec(__filename, function (env, done) {
    return __awaiter(this, void 0, void 0, function* () {
        utils_1.src('index.ts', `
        export default function sum(a: number, b: number) {
            return a + b;
        }

        sum(1, '1');
    `);
        utils_1.tsconfig();
        config(env);
        const webpack = utils_1.execWebpack();
        webpack.strictOutput();
        yield webpack.wait(utils_1.stderr('Checking finished with 1 errors'), utils_1.stdout([
            'ERROR in [at-loader]',
            `Argument of type '"1"' is not assignable to parameter of type 'number'`
        ]));
        webpack.close();
        done();
    });
});
//# sourceMappingURL=compile-output.js.map