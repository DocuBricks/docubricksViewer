"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
utils_1.spec(__filename, function () {
    return __awaiter(this, void 0, void 0, function* () {
        const index = utils_1.src('index.ts', `
        class HiThere {
            constructor(a: number, b: string) {
                const t = a + b;
            }
        }
    `);
        utils_1.install('babel-core', 'babel-preset-es2015');
        utils_1.tsconfig();
        const config = utils_1.webpackConfig(utils_1.query({
            useBabel: true,
            babelOptions: {
                "presets": ["es2015"]
            }
        }));
        const watcher = yield utils_1.watch(config);
        let stats = yield watcher.wait();
        utils_1.expectErrors(stats, 0);
        utils_1.checkOutput('index.js', `
        var HiThere = function HiThere(a, b) {
            _classCallCheck(this, HiThere);
            var t = a + b;
        }
    `);
        index.update(() => `
        function sum(...items: number[]) {
            return items.reduce((a,b) => a + b, 0);
        }
    `);
        stats = yield watcher.wait();
        utils_1.expectErrors(stats, 0);
        utils_1.checkOutput('index.js', `
        function sum() {
            for(var _len = arguments.length,
                items = Array(_len),
                _key = 0;
                _key < _len;
                _key++
            ) {
                items[_key] = arguments[_key];
            }
            return items.reduce(function(a,b){ return a + b; }, 0);
        }
    `);
    });
});
//# sourceMappingURL=babel.js.map