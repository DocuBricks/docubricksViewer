"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var utils_1 = require('./utils');
utils_1.spec(__filename, function () {
    return __awaiter(this, void 0, void 0, function* () {
        var index = utils_1.src('index.ts', "\n        class HiThere {\n            constructor(a: number, b: string) {\n                const t = a + b;\n            }\n        }\n    ");
        utils_1.install('babel-core', 'babel-preset-es2015');
        utils_1.tsconfig();
        var config = utils_1.webpackConfig(utils_1.query({
            useBabel: true,
            babelOptions: {
                "presets": ["es2015"]
            }
        }));
        var watcher = yield utils_1.watch(config);
        var stats = yield watcher.wait();
        utils_1.expectErrors(stats, 0);
        utils_1.checkOutput('index.js', "\n        var HiThere = function HiThere(a, b) {\n            _classCallCheck(this, HiThere);\n            var t = a + b;\n        }\n    ");
        index.update(function () { return "\n        function sum(...items: number[]) {\n            return items.reduce((a,b) => a + b, 0);\n        }\n    "; });
        stats = yield watcher.wait();
        utils_1.expectErrors(stats, 0);
        utils_1.checkOutput('index.js', "\n        function sum() {\n            for(var _len = arguments.length,\n                items = Array(_len),\n                _key = 0;\n                _key < _len;\n                _key++\n            ) {\n                items[_key] = arguments[_key];\n            }\n            return items.reduce(function(a,b){ return a + b; }, 0);\n        }\n    ");
    });
});
