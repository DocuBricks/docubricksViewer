"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var utils_1 = require('./utils');
utils_1.spec(__filename, function () {
    return __awaiter(this, void 0, void 0, function* () {
        var sum = utils_1.src('sum.ts', "\n        export default function sum(a: number, b: number) {\n            return a + b;\n        }\n    ");
        var index = utils_1.src('index.ts', "\n        import sum from './sum'\n        sum(1, 1);\n    ");
        utils_1.tsconfig();
        var watcher = utils_1.watch(utils_1.webpackConfig());
        var stats = yield watcher.wait();
        utils_1.expectErrors(stats, 0);
        sum.update(function () { return "\n        export default function sum(a: number, b: string) {\n            return a + b;\n        }\n    "; });
        stats = yield watcher.wait();
        utils_1.expectErrors(stats, 1, [
            "Argument of type '1' is not assignable to parameter of type 'string'"
        ]);
        index.update(function () { return "\n        import sum from './sum'\n        sum(1, '1');\n    "; });
        stats = yield watcher.wait();
        utils_1.expectErrors(stats, 0);
    });
});
